------------------
NOTES
------------------

Always read the exploit code prior to running
	ex. buffer overflow on win2003 vs 2008
		win 2008 has ASLR and would likely cause a crash and outage vs something actually useful
	rewrite in different languages
	rewrite for different architectures

Fixing memory corruptions exploits
	General overview of a buffer overflow
		1. Create a large buffer to trigger overflow
		2. Take control of EIP by overwriting the return address on the stack
		3. include a payload as shellcode with an optional NOP sled
		4. use the correct return address such as JMP ESP to redirect execution
	may need to modify elements such as payload, remote host, addresses, etc
	best way to do test for yourself is to create a test environment that is identical to the target

	Importing and examining the exploit
		will use the following exploit as an example
			searchsploit -m 42341
		exploit has windows headers, obviously meant to be compiled on windows
			can cross compile with mingw
				sudo apt install mingw-w64
			i686-w64-mingw32-gcc 42341.c -o syncbreeze_exploit.exe -lws2_32
				add -lw2_32 to specify the linker

		add a new return address, best to debug in a test env, although can scrape other public exploits to find valid return addresses, but is less reliable
		add a new payload that is generated from msfvenom into the shellcode

Fixing web exploits
	Important considerations
    Does it initiate an HTTP or HTTPS connection?
    Does it access a web application specific path or route?
    Does the exploit leverage a pre-authentication vulnerability?
    If not, how does the exploit authenticate to the web application?
    How are the GET or POST requests crafted to trigger and exploit the vulnerability?
    Does it rely on default application settings (such as the web path of the application) that may have been changed after installation?
    Will oddities such as self-signed certificates disrupt the exploit?

